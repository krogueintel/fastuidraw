/*!
 * \file fastuidraw_painter_image_brush.frag.glsl.resource_string
 * \brief file fastuidraw_painter_image_brush.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */

#ifndef FASTUIDRAW_IMAGE_ATLAS_DISABLED

vec4
FASTUIDRAW_LOCAL(brush_image_of_atlas)(in vec2 q, in uint image_filter, in float lod)
{
  vec2 image_xy;
  fastuidraw_image_extended_info_type image_info;
  vec4 image_color;

  image_info.base.num_levels = fastuidraw_brush_image_number_index_lookups;
  image_info.base.image_texel_size_on_master_index_tile = fastuidraw_brush_image_texel_size_on_master_index_tile;
  image_info.base.recip_image_texel_size_on_master_index_tile = fastuidraw_brush_recip_image_texel_size_on_master_index_tile;
  image_info.image_size = vec2(fastuidraw_brush_image_size_x, fastuidraw_brush_image_size_y);
  image_info.master_index_tile_bottom_left = vec2(fastuidraw_brush_image_x, fastuidraw_brush_image_y);
  image_info.master_index_tile_layer = fastuidraw_brush_image_layer;

  /* clamp lod away from FASTUIDRAW_IMAGE_ATLAS_COLOR_TILE_LOG2_SIZE */
  lod = min(lod, float(FASTUIDRAW_IMAGE_ATLAS_COLOR_TILE_LOG2_SIZE) - 0.5);

  if (image_filter == uint(fastuidraw_brush_image_filter_nearest))
    {
      lod = ceil(lod);
      image_color = fastuidraw_nearest_filter_atlas_image(q, image_info, lod);
    }
  else if (image_filter == uint(fastuidraw_brush_image_filter_linear) || lod > 0.5)
    {
      lod = round(lod);
      image_color = fastuidraw_linear_filter_atlas_image(q, image_info, int(lod));
    }
  else
    {
      image_color = fastuidraw_cubic_filter_atlas_image(q, image_info);
    }

  return image_color;
}

#else

vec4
FASTUIDRAW_LOCAL(brush_image_of_atlas)(in vec2 q, in uint image_filter, in float lod)
{
  return vec4(1.0, 1.0, 1.0, 1.0);
}

#endif

vec4
FASTUIDRAW_LOCAL(brush_image_of_texture)(in sampler2D surface, in vec2 texel_coord, in uint image_filter, in float lod)
{
  vec4 image_color;

  texel_coord += vec2(fastuidraw_brush_image_x, fastuidraw_brush_image_y);
  if (image_filter == uint(fastuidraw_brush_image_filter_nearest))
    {
      image_color = fastuidraw_nearest_filter_texture(surface, texel_coord, lod);
    }
  else if (image_filter == uint(fastuidraw_brush_image_filter_linear) || lod > 0.5)
    {
      image_color = fastuidraw_linear_filter_texture(surface, texel_coord, lod);
    }
  else
    {
      image_color = fastuidraw_cubic_filter_texture(surface, texel_coord);
    }

  return image_color;
}

vec4
FASTUIDRAW_LOCAL(brush_image_of_context_texture)(in vec2 texel_coord, in uint image_filter, in float lod)
{
  return FASTUIDRAW_LOCAL(brush_image_of_texture)(fastuidraw_brush_context_texture(0), texel_coord, image_filter, lod);
}

#if defined(FASTUIDRAW_SUPPORT_BINDLESS_TEXTURE)

vec4
FASTUIDRAW_LOCAL(brush_image_of_bindless)(in vec2 texel_coord, in uint image_filter, in float lod)
{
  #if defined(FASTUIDRAW_BINDLESS_HANDLE_UVEC2)
    uvec2 handle;
    handle.x = fastuidraw_brush_image_bindless_low_handle;
    handle.y = fastuidraw_brush_image_bindless_high_handle;
  #else
    uint64_t handle;
    handle = uint64_t(fastuidraw_brush_image_bindless_high_handle) << uint64_t(32u);
    handle |= uint64_t(fastuidraw_brush_image_bindless_low_handle);
  #endif

  sampler2D im = sampler2D(handle);
  return FASTUIDRAW_LOCAL(brush_image_of_texture)(im, texel_coord, image_filter, lod);
}

#else

vec4
FASTUIDRAW_LOCAL(brush_image_of_bindless)(in vec2 p, in uint image_filter, in float lod)
{
  return vec4(1.0, 1.0, 1.0, 1.0);
}

#endif

vec4
fastuidraw_gl_frag_brush_main(in uint sub_shader, inout uint shader_data_block)
{
  vec2 p, dpdx, dpdy;
  vec4 return_value;

  p = vec2(fastuidraw_brush_p_x, fastuidraw_brush_p_y);
  dpdx = dFdx(p);
  dpdy = dFdy(p);

  if (fastuidraw_brush_image_size_x > 0.0
      && fastuidraw_brush_image_size_y > 0.0
      && (sub_shader & fastuidraw_brush_image_filter_mask) != 0u)
    {
      uint image_filter, image_type, mipmap_max_level;
      vec2 q;
      float lod;

      /* Clamp the image coordinate to the dimensions of the image;
       * Should we allow for repeat modes as well?
       */
      q.x = clamp(p.x, 0.0, float(fastuidraw_brush_image_size_x) - 1.0);
      q.y = clamp(p.y, 0.0, float(fastuidraw_brush_image_size_y) - 1.0);
      image_type = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_image_type_bit0,
                                           fastuidraw_brush_image_filter_num_bits,
                                           sub_shader);

      image_filter = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_image_filter_bit0,
                                             fastuidraw_brush_image_filter_num_bits,
                                             sub_shader);

      mipmap_max_level = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_image_mipmap_bit0,
                                                 fastuidraw_brush_image_mipmap_num_bits,
                                                 sub_shader);

      if (mipmap_max_level > 0u)
        {
          float rho;
          rho = (dot(dpdx, dpdx) + dot(dpdy, dpdy)) * 0.5;
          lod = 0.5 * log2(max(1.0, rho));
          lod = min(float(mipmap_max_level), lod);
        }
      else
        {
          lod = 0.0;
        }

      if (image_type == uint(fastuidraw_brush_image_type_on_atlas))
        {
          return_value = FASTUIDRAW_LOCAL(brush_image_of_atlas)(q, image_filter, lod);
        }
      else if (image_type == uint(fastuidraw_brush_image_type_bindless_texture2d))
        {
          return_value = FASTUIDRAW_LOCAL(brush_image_of_bindless)(q, image_filter, lod);
        }
      else
        {
          return_value = FASTUIDRAW_LOCAL(brush_image_of_context_texture)(q, image_filter, lod);
        }

      /* BEWARE: we are just testing if the format bits are non-zero;
       * We get away with this for now because there are only two
       * image-formats: rgba and premultiplied_rgba with a non-zero
       * value indicateing that the rgb components are pre-multiplied.
       */
      if ((sub_shader & fastuidraw_brush_image_format_mask) == 0u)
        {
          return_value.rgb *= return_value.a;
        }
    }
  else
    {
      return_value = vec4(1.0, 1.0, 1.0, 1.0);
    }

  shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_image_raw_data_size)();
  return return_value;
}
