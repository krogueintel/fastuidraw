/*!
 * \file fastuidraw_painter_brush.frag.glsl.resource_string
 * \brief file fastuidraw_painter_brush.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */

float
FASTUIDRAW_LOCAL(brush_apply_spread)(in float t, in float range,
                                     in uint spread_type)
{
  if (spread_type == fastuidraw_brush_spread_mirror)
    {
      t = fastuidraw_compute_mirror_spread(t, range);
    }
  else if (spread_type == fastuidraw_brush_spread_repeat)
    {
      t = fastuidraw_compute_repeat_spread(t, range);
    }
  else if (spread_type == fastuidraw_brush_spread_mirror_repeat)
    {
      t = fastuidraw_compute_mirror_repeat_spread(t, range);
    }
  else
    {
      t = fastuidraw_compute_clamp_spread(t, range);
    }
  return t;
}

vec4
fastuidraw_gl_frag_brush_main(in uint sub_shader, inout uint shader_data_block)
{
  vec2 p, dpdx, dpdy;
  vec4 return_value = vec4(fastuidraw_brush_color_x,
                           fastuidraw_brush_color_y,
                           fastuidraw_brush_color_z,
                           fastuidraw_brush_color_w);

  p = vec2(fastuidraw_brush_p_x, fastuidraw_brush_p_y);
  dpdx = dFdx(p);
  dpdy = dFdy(p);

  /* TODO:
   *  have bits in x and y to specify the repeat modes
   *    - clamp
   *    - mirror
   *    - repeat
   *    - mirror-repeat
   */
  if ((fastuidraw_brush_features & uint(fastuidraw_brush_repeat_window_mask)) != 0u)
    {
      uint x_spread, y_spread;

      x_spread = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_repeat_window_x_spread_type_bit0,
                                         fastuidraw_brush_spread_type_num_bits,
                                         fastuidraw_brush_features);

      y_spread = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_repeat_window_y_spread_type_bit0,
                                         fastuidraw_brush_spread_type_num_bits,
                                         fastuidraw_brush_features);

      p -= vec2(fastuidraw_brush_repeat_window_x, fastuidraw_brush_repeat_window_y);
      p.x = FASTUIDRAW_LOCAL(brush_apply_spread)(p.x, fastuidraw_brush_repeat_window_w, x_spread);
      p.y = FASTUIDRAW_LOCAL(brush_apply_spread)(p.y, fastuidraw_brush_repeat_window_h, y_spread);
      p += vec2(fastuidraw_brush_repeat_window_x, fastuidraw_brush_repeat_window_y);
      shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_repeat_window_size)();

      fastuidraw_brush_p_x = p.x;
      fastuidraw_brush_p_y = p.y;
    }

  if ((fastuidraw_brush_features & uint(fastuidraw_brush_transformation_matrix_mask)) != 0u)
    {
      shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_transformation_matrix_size)();
    }

  if ((fastuidraw_brush_features & uint(fastuidraw_brush_transformation_translation_mask)) != 0u)
    {
      shader_data_block += FASTUIDRAW_LOCAL(fastuidraw_read_brush_transformation_translation_size)();
    }

  if ((fastuidraw_brush_features & uint(fastuidraw_brush_image_mask)) != 0u)
    {
      uint image_sub_shader;

      image_sub_shader = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_image_bit0,
                                                 fastuidraw_brush_image_num_bits,
                                                 fastuidraw_brush_features);

      return_value *= image_brush(image_sub_shader, shader_data_block);
    }

  if ((fastuidraw_brush_features & fastuidraw_brush_gradient_mask) != 0u)
    {
      uint gradient_sub_shader;

      gradient_sub_shader = FASTUIDRAW_EXTRACT_BITS(fastuidraw_brush_gradient_bit0,
                                                    fastuidraw_brush_gradient_num_bits,
                                                    fastuidraw_brush_features);
      return_value *= gradient_brush(gradient_sub_shader, shader_data_block);
    }

  return return_value;
}
