/*!
 * \file fastuidraw_painter_glyph_coverage.frag.glsl.resource_string
 * \brief file fastuidraw_painter_glyph_coverage.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */


vec4
fastuidraw_gl_frag_main(in uint sub_shader,
                        inout uint shader_data_block)
{
  float texel, coverage;
  ivec2 coord00, coord01, coord10, coord11;
  vec2 mixer;
  uint v00, v01, v10, v11;
  float f00, f10, f01, f11;
  float f0, f1;
  uvec2 dims = uvec2(fastuidraw_glyph_width, fastuidraw_glyph_height);
  vec2 tau = vec2(fastuidraw_glyph_coord_x, fastuidraw_glyph_coord_y);
  vec2 tau_plus_half = tau + vec2(0.5, 0.5);

  coord00 = ivec2(tau_plus_half) - ivec2(1, 1);
  coord10 = coord00 + ivec2(1, 0);
  coord01 = coord00 + ivec2(0, 1);
  coord11 = coord00 + ivec2(1, 1);
  mixer = tau_plus_half - vec2(ivec2(tau_plus_half));

  v00 = fastuidraw_read_texel_from_data(coord00, dims, fastuidraw_glyph_data_location);
  v01 = fastuidraw_read_texel_from_data(coord01, dims, fastuidraw_glyph_data_location);
  v10 = fastuidraw_read_texel_from_data(coord10, dims, fastuidraw_glyph_data_location);
  v11 = fastuidraw_read_texel_from_data(coord11, dims, fastuidraw_glyph_data_location);

  f00 = float(v00);
  f10 = float(v10);
  f01 = float(v01);
  f11 = float(v11);

  f0 = mix(f00, f01, mixer.y);
  f1 = mix(f10, f11, mixer.y);
  texel = mix(f0, f1, mixer.x);
  coverage = float(texel) / 255.0;

  return vec4(coverage);
}
