/*!
 * \file fastuidraw_painter_main.vert.glsl.resource_string
 * \brief file fastuidraw_painter_main.vert.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */


/* Skeleton for Uber-vertex shader, out's of the shader will
   be placed -before- this code.
 */

#ifdef FASTUIDRAW_PAINTER_NORMALIZED_Z_MINUS_1_TO_1
  #define FASTUIDRAW_DEPTH_COEFF (1.0 / float(fastuidraw_half_max_z) )
#else
  #define FASTUIDRAW_DEPTH_COEFF (1.0 / float(fastuidraw_max_z) )
#endif

void
main(void)
{
  fastuidraw_header h;
  vec2 brush_p, normalized_translate;
  vec3 clip_p;
  fastuidraw_clipping_data clipping;
  float normalized_depth, raw_depth;
  int add_z;

  fastuidraw_read_header(fastuidraw_header_attribute, h);
  fastuidraw_read_clipping(h.clipping_location, clipping);
  fastuidraw_read_item_matrix(h.item_matrix_location, fastuidraw_item_matrix, normalized_translate);

  fastuidraw_frag_shader = h.item_shader;
  fastuidraw_frag_shader_data_location = h.item_shader_data_location;
  fastuidraw_blend_shader = h.blend_shader;
  fastuidraw_blend_shader_data_location = h.blend_shader_data_location;
  fastuidraw_deferred_buffer_offset_x = h.offset_to_deferred_coverage.x;
  fastuidraw_deferred_buffer_offset_y = h.offset_to_deferred_coverage.y;
  fastuidraw_deferred_buffer_min_x = h.deferred_coverage_min.x;
  fastuidraw_deferred_buffer_min_y = h.deferred_coverage_min.y;
  fastuidraw_deferred_buffer_max_x = h.deferred_coverage_max.x;
  fastuidraw_deferred_buffer_max_y = h.deferred_coverage_max.y;

  fastuidraw_run_vert_shader(h, add_z, brush_p, clip_p);
  if (h.brush_adjust_location != 0u)
    {
      fastuidraw_brush_adjust_data adjust;
      fastuidraw_read_brush_adjust(h.brush_adjust_location, adjust);
      brush_p = adjust.shear * brush_p + adjust.translate;
    }

  fastuidraw_brush_shader_data_location = h.brush_shader_data_location;
  fastuidraw_brush_shader = h.brush_shader;
  fastuidraw_run_brush_vert_shader(h, brush_p);

  if (h.blend_shader_data_location == FASTUIDRAW_HEADER_DRAWING_OCCLUDER)
    {
      add_z = 0;
    }

  fastuidraw_apply_clipping(clip_p, clipping);

  /* and finally emit gl_Position; the value needed in the
   * depth buffer is stored in h.z, but it is an integer that
   * starts at 0 and is incremented by one, we need to convert it
   * to normalized coords.
   */
  raw_depth = float(add_z + h.z);

  #ifdef FASTUIDRAW_PAINTER_NORMALIZED_Z_MINUS_1_TO_1
    {
      normalized_depth = (FASTUIDRAW_DEPTH_COEFF * raw_depth) - 1.0;
    }
  #else
    {
      normalized_depth = (FASTUIDRAW_DEPTH_COEFF * raw_depth);
    }
  #endif

  clip_p.xy += normalized_translate * clip_p.z;
  gl_Position = vec4(clip_p.xy, normalized_depth * clip_p.z, clip_p.z);
}
