/*!
 * \file fastuidraw_painter_stroke_util.frag.glsl.resource_string
 * \brief file fastuidraw_painter_stroke_util.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */


float
FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_interval)(in uint dashed_stroking_data_location,
                                                         in float total_distance,
                                                         in float first_interval_start,
                                                         in float in_distance,
                                                         in float start, in float end,
                                                         in uint number_intervals)
{
  if (in_distance <= start)
    {
      return in_distance - start;
    }
  else if (in_distance >= end)
    {
      return end - in_distance;
    }
  else
    {
      int interval_id;
      float interval_begin, interval_end, s;

      s = fastuidraw_compute_interval(dashed_stroking_data_location,
                                      total_distance,
                                      first_interval_start,
                                      in_distance, number_intervals,
                                      interval_id,
                                      interval_begin,
                                      interval_end);

      return s * min(in_distance - interval_begin, interval_end - in_distance);
    }
}

float
FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_interval)(in uint dashed_stroking_data_location,
                                                         in float total_distance,
                                                         in float first_interval_start,
                                                         in float in_distance,
                                                         in uint number_intervals)
{
  int interval_id;
  float interval_begin, interval_end, s;

  s = fastuidraw_compute_interval(dashed_stroking_data_location,
                                  total_distance,
                                  first_interval_start,
                                  in_distance, number_intervals,
                                  interval_id,
                                  interval_begin,
                                  interval_end);

  return s * min(in_distance - interval_begin, interval_end - in_distance);
}


float
FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_coverage_implement)(in bool add_rounded_caps,
                                                                   in bool add_square_caps,
                                                                   in float q, in float r,
                                                                   in float fwidth_distance_value,
                                                                   in float stroking_on_boundary,
                                                                   in float fwidth_stroking_on_boundary,
                                                                   in bool distance_value_constant_on_primitive)
{
  float d, y, qq_yy, fwidth_qq_yy, fw, return_value;

  y = r * stroking_on_boundary;
  qq_yy = q * q + y * y;

  fw = fwidth_distance_value;
  fwidth_qq_yy = 2.0 * abs(q) * fw + 2.0 * abs(y) * r * fwidth_stroking_on_boundary;
  if (add_rounded_caps)
    {
      /* fw represents the tolerance of a pixel. The expected
       * condition is if (q < 0.0), but that gives black-line
       * render issue on the boundary between the cap and the
       * dash-pattern boundary. By relaxing the condition by
       * (essentially) 1-pixel, we can avoid that rendering
       * issue.
       */
      if (q < fw && q > -fw - r)
        {
          float sq;

          sq = sqrt(qq_yy);
          q = r - sq;
          fw = 0.5 * fwidth_qq_yy / sq;
        }
    }
  else if (add_square_caps)
    {
      q += r;
    }

  if (!distance_value_constant_on_primitive)
    {
      d = max(abs(q), fw);
      return_value = max(0.0, q / d);
    }
  else
    {
      return_value = q > 0.0 ? 1.0 : 0.0;
    }

  return return_value;
}

float
FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_coverage)(in bool add_rounded_caps,
                                                         in bool add_square_caps,
                                                         inout uint shader_data_block,
                                                         in float distance_value,
                                                         in float fwidth_distance_value,
                                                         in float stroking_on_boundary,
                                                         in float fwidth_stroking_on_boundary,
                                                         in float distance_sub_edge_start,
                                                         in float distance_sub_edge_end,
                                                         in bool skip_interval_lookup,
                                                         in bool distance_value_constant_on_primitive)
{
  float q;
  uint dash_pattern_at;
  fastuidraw_dashed_stroking_params_header stroke_params;

  dash_pattern_at = shader_data_block + fastuidraw_stroke_dashed_stroking_params_header_num_blocks;
  fastuidraw_read_dashed_stroking_params_header(shader_data_block, stroke_params);

  if (skip_interval_lookup)
    {
      q = distance_value;
    }
  else
    {
      float f;
      f = distance_value > stroke_params.total_length ?
        stroke_params.first_interval_start_on_looping :
        stroke_params.first_interval_start;

      q = FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_interval)(dash_pattern_at,
                                                                   stroke_params.total_length,
                                                                   f,
                                                                   distance_value,
                                                                   distance_sub_edge_start,
                                                                   distance_sub_edge_end,
                                                                   stroke_params.number_intervals);
    }

  return FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_coverage_implement)(add_rounded_caps,
                                                                            add_square_caps,
                                                                            q, abs(stroke_params.radius),
                                                                            fwidth_distance_value,
                                                                            stroking_on_boundary,
                                                                            fwidth_stroking_on_boundary,
                                                                            distance_value_constant_on_primitive);
}

float
FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_coverage)(inout uint shader_data_block,
                                                         in float distance_value,
                                                         in float fwidth_distance_value,
                                                         in bool skip_interval_lookup,
                                                         in bool distance_value_constant_on_primitive)
{
  float d, q, return_value;
  uint dash_pattern_at;
  fastuidraw_dashed_stroking_params_header stroke_params;

  dash_pattern_at = shader_data_block + fastuidraw_stroke_dashed_stroking_params_header_num_blocks;
  fastuidraw_read_dashed_stroking_params_header(shader_data_block, stroke_params);

  if (skip_interval_lookup)
    {
      q = distance_value;
    }
  else
    {
      float f;
      f = distance_value > stroke_params.total_length ?
        stroke_params.first_interval_start_on_looping :
        stroke_params.first_interval_start;
      q = FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_interval)(dash_pattern_at,
                                                                   stroke_params.total_length,
                                                                   f,
                                                                   distance_value,
                                                                   stroke_params.number_intervals);
    }

  if (!distance_value_constant_on_primitive)
    {
      /* ISSUE: if the start (or end) of an edge corresponds
       * exactly at a dash boundary, then that edge start (or
       * end) will get anti-aliased. However this is BAD
       * because the join gets drawn and where the join and
       * edge meet we will have 1-pixel fuzz instead of
       * solid resulting in icky rendering.
       */
      d = max(abs(q), fwidth_distance_value);
      return_value = max(0.0, q / d);
    }
  else
    {
      return_value = q > 0.0 ? 1.0 : 0.0;
    }

  return return_value;
}
