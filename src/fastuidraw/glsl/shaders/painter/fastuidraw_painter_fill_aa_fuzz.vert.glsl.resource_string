/*!
 * \file fastuidraw_painter_fill_aa_fuzz.vert.glsl.resource_string
 * \brief file fastuidraw_painter_fill_aa_fuzz.vert.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */

float
FASTUIDRAW_LOCAL(compute_dist)(in vec3 clip_p, in vec3 clip_direction)
{
  const float sqrt2 = 1.41421356237;
  const float two_minus_sqrt2 = 2.0 - 1.41421356237;
  float hv, r;
  vec2 normalized_direction;

  /* The basic idea: compute the direction in screen coordinates,
   * and from that value compute the distance in pixels needed
   * to touch the next sample. For completely vertical or
   * horizontal the value is 1; for 45-degrees the value is
   * sqrt2;
   */
  normalized_direction = normalize(clip_direction.xy);
  hv = min(abs(normalized_direction.x),
           abs(normalized_direction.y));
  r = 1.0 + hv * two_minus_sqrt2;

  return fastuidraw_local_distance_from_pixel_distance(r, clip_p, clip_direction);
}

void
fastuidraw_gl_vert_main(in uint sub_shader,
                        in uvec4 in_attrib0,
                        in uvec4 in_attrib1,
                        in uvec4 in_attrib2,
                        inout uint shader_data_block,
                        #ifdef FASTUIDRAW_RENDER_TO_COLOR_BUFFER
                        out int z_add,
                        out vec2 out_brush_p,
                        #endif
                        out vec3 out_clip_p)
{
  vec2 position;
  vec2 p, n0, n1;
  vec3 clip_direction, clip_p;
  float dist, sgn, hv;
  uint type;
  const float miter_limit = 1.0;

  position = uintBitsToFloat(in_attrib0.xy);
  type = in_attrib0.z;

  n0 = uintBitsToFloat(in_attrib1.xy);
  n1 = uintBitsToFloat(in_attrib1.zw);

  if (type == fastuidraw_aa_fuzz_type_on_path)
    {
      p = position;
    }
  else if (type == fastuidraw_aa_fuzz_type_on_boundary)
    {
      clip_p = fastuidraw_item_matrix * vec3(position, 1.0);
      n0 = fastuidraw_align_normal_to_screen(clip_p, n0);
      clip_direction = fastuidraw_item_matrix * vec3(n0, 0.0);
      dist = FASTUIDRAW_LOCAL(compute_dist)(clip_p, clip_direction);
      p = position + dist * n0;
    }
  else
    {
      float m, mm, r, r0, r1, det;
      vec2 v0 = vec2(n0.y, -n0.x), v1 = vec2(n1.y, -n1.x);
      vec2 d0, d1, delta_d;

      clip_p = fastuidraw_item_matrix * vec3(position, 1.0);

      n0 = fastuidraw_align_normal_to_screen(clip_p, n0);
      clip_direction = fastuidraw_item_matrix * vec3(n0, 0.0);
      r0 = FASTUIDRAW_LOCAL(compute_dist)(clip_p, clip_direction);
      d0 = r0 * n0;

      n1 = fastuidraw_align_normal_to_screen(clip_p, n1);
      clip_direction = fastuidraw_item_matrix * vec3(n1, 0.0);
      r1 = FASTUIDRAW_LOCAL(compute_dist)(clip_p, clip_direction);
      d1 = r1 * n1;

      delta_d = d1 - d0;
      det = v0.x * v1.y - v0.y * v1.x;

      r = (v1.y * delta_d.x - v1.x * delta_d.y) / det;
      r = clamp(r, -miter_limit, miter_limit);
      p = position + d0 + r * v0;
    }

  fastuidraw_aa_fuzz = (type == 0u) ? 0.0 : 1.0;
  out_clip_p = fastuidraw_item_matrix * vec3(p, 1.0);

  #ifdef FASTUIDRAW_RENDER_TO_COLOR_BUFFER
    {
      out_brush_p = p;
      z_add = int(in_attrib0.w);
    }
  #endif
}
