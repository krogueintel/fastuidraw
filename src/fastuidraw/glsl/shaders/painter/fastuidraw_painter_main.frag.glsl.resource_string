/*!
 * \file fastuidraw_painter_main.frag.glsl.resource_string
 * \brief file fastuidraw_painter_main.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */

#ifdef FASTUIDRAW_PAINTER_BLEND_DUAL_SRC_BLEND
  layout(location = 0, index = 0) out vec4 fastuidraw_final_color0;
  layout(location = 0, index = 1) out vec4 fastuidraw_final_color1;
#elif defined(FASTUIDRAW_PAINTER_BLEND_SINGLE_SRC_BLEND)
  layout(location = 0) out vec4 fastuidraw_final_color;
#elif defined(FASTUIDRAW_PAINTER_BLEND_FRAMEBUFFER_FETCH)
  layout(location = 0) inout vec4 fastuidraw_final_color;
#elif defined(FASTUIDRAW_PAINTER_BLEND_INTERLOCK)
  layout(binding = FASTUIDRAW_PAINTER_BLEND_INTERLOCK_BINDING, rgba8) coherent restrict lowp uniform image2D fastuidraw_color_buffer;
#endif

#if defined(FASTUIDRAW_PAINTER_CLIPPING_SKIP_COLOR_WRITE)
  #if !defined(FASTUIDRAW_PAINTER_BLEND_FRAMEBUFFER_FETCH) && !defined(FASTUIDRAW_PAINTER_BLEND_INTERLOCK)
    #error "Using FASTUIDRAW_PAINTER_CLIPPING_SKIP_COLOR_WRITE without FASTUIDRAW_PAINTER_BLEND_FRAMEBUFFER_FETCH or FASTUIDRAW_PAINTER_BLEND_INTERLOCK"
  #endif
#endif

void
main(void)
{
  vec4 v = vec4(0.0);

  fastuidraw_mirror_varyings();
  fastuidraw_apply_clipping();

  #ifdef FASTUIDRAW_RUN_ITEM_FRAG_SHADER
  if (FASTUIDRAW_RUN_ITEM_FRAG_SHADER)
  #endif
    {
      if (fastuidraw_blend_shader_data_location != FASTUIDRAW_HEADER_DRAWING_OCCLUDER)
        {
          /* The standard canvas pipeline emits pre-multiplied alpha surfaces;
           * the output of fastuidraw_run_frag_shader and the brush are also
           * pre-multiplied by alpha.
           */
          vec4 b, c;
          b = fastuidraw_run_brush_frag_shader(fastuidraw_brush_shader, fastuidraw_brush_shader_data_location);
          c = fastuidraw_run_frag_shader(fastuidraw_frag_shader, fastuidraw_frag_shader_data_location);
          v = b * c;
        }
      else
        {
          v = vec4(0.0);
          #if defined(FASTUIDRAW_PAINTER_CLIPPING_SKIP_COLOR_WRITE)
            {
              FASTUIDRAW_DISCARD_COLOR_WRITE = true;
            }
          #endif
        }
    }

  #ifdef FASTUIDRAW_PAINTER_BLEND_DUAL_SRC_BLEND
    {
      fastuidraw_run_blend_shader(fastuidraw_blend_shader,
                                  fastuidraw_blend_shader_data_location,
                                  v, fastuidraw_final_color0, fastuidraw_final_color1);
    }
  #elif defined(FASTUIDRAW_PAINTER_BLEND_SINGLE_SRC_BLEND)
    {
      fastuidraw_run_blend_shader(fastuidraw_blend_shader,
                                  fastuidraw_blend_shader_data_location,
                                  v, fastuidraw_final_color);
    }
  #elif defined(FASTUIDRAW_PAINTER_BLEND_FRAMEBUFFER_FETCH)
    {
      vec4 in_fb, out_fb;

      in_fb = fastuidraw_final_color;
      if (!FASTUIDRAW_DISCARD_COLOR_WRITE)
        {
          fastuidraw_run_blend_shader(fastuidraw_blend_shader,
                                      fastuidraw_blend_shader_data_location,
                                      v, in_fb, out_fb);
        }
      else
        {
          out_fb = in_fb;
        }
      fastuidraw_final_color = out_fb;
    }
  #elif defined(FASTUIDRAW_PAINTER_BLEND_INTERLOCK)
    {
      fastuidraw_begin_interlock();
      if (!FASTUIDRAW_DISCARD_COLOR_WRITE)
        {
          vec4 in_fb, out_fb;
          ivec2 pos = ivec2(gl_FragCoord.xy);

          in_fb = imageLoad(fastuidraw_color_buffer, pos);
          fastuidraw_run_blend_shader(fastuidraw_blend_shader,
                                      fastuidraw_blend_shader_data_location,
                                      v, in_fb, out_fb);
          imageStore(fastuidraw_color_buffer, pos, out_fb);
        }
      fastuidraw_end_interlock();
    }
  #endif
}
