/*!
 * \file fastuidraw_spread.glsl.resource_string
 * \brief file fastuidraw_spread.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */

/*!\addtogroup GLSLVertFragCode
 * @{
 */

/*! \brief compute mirror spread pattern on [0, 1] */
float
fastuidraw_compute_mirror_spread(float t)
{
  return clamp(abs(t), 0.0, 1.0);
}

/*! \brief compute repeat spread pattern on [0, 1] */
float
fastuidraw_compute_repeat_spread(float t)
{
  return fract(t);
}

/*! \brief compute mirror-repeat spread pattern on [0, 1] */
float
fastuidraw_compute_mirror_repeat_spread(float t)
{
  return 1.0 - abs(mod(t, 2.0) - 1.0);
}

/*! \brief compute clamp spread pattern on [0, 1] */
float
fastuidraw_compute_clamp_spread(float t)
{
  return clamp(t, 0.0, 1.0);
}

/*! \brief compute mirror spread pattern on [0, range] */
float
fastuidraw_compute_mirror_spread(float t, float range)
{
  return clamp(abs(t), 0.0, range);
}

/*! \brief compute repeat spread pattern on [0, range] */
float
fastuidraw_compute_repeat_spread(float t, float range)
{
  return mod(t, range);
}

/*! \brief compute mirror-repeat spread pattern on [0, range] */
float
fastuidraw_compute_mirror_repeat_spread(float t, float range)
{
  return range - abs(mod(t, 2.0 * range) - range);
}

/*! \brief compute clamp spread pattern on [0, range] */
float
fastuidraw_compute_clamp_spread(float t, float range)
{
  return clamp(t, 0.0, range);
}

/*! \brief compute mirror spread pattern on [begin_range, end_range] */
float
fastuidraw_compute_mirror_spread(float t, float begin_range, float end_range)
{
  return begin_range + fastuidraw_compute_mirror_spread(t - begin_range, end_range - begin_range);
}

/*! \brief compute repeat spread pattern on [begin_range, end_range] */
float
fastuidraw_compute_repeat_spread(float t, float begin_range, float end_range)
{
  return begin_range + fastuidraw_compute_repeat_spread(t - begin_range, end_range - begin_range);
}

/*! \brief compute mirror-repeat spread pattern on [begin_range, end_range] */
float
fastuidraw_compute_mirror_repeat_spread(float t, float begin_range, float end_range)
{
  return begin_range + fastuidraw_compute_mirror_repeat_spread(t - begin_range, end_range - begin_range);
}

/*! \brief compute clamp spread pattern on [begin_range, end_range] */
float
fastuidraw_compute_clamp_spread(float t, float begin_range, float end_range)
{
  return clamp(t, begin_range, end_range);
}
/*! @} */
