/*!
 * \file fastuidraw_circular_interpolate.glsl.resource_string
 * \brief file fastuidraw_circular_interpolate.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */

/*!\addtogroup GLSLVertFragCode
 * @{
 */

/*!
 * \brief compute interpolation along a circle.
 * \param v0 starting point on circle, must have unit length
 * \param v1 end point on circle, must have unit length
 * \param d the cosine of the angle (in radians) between v0 and v1, i.e. the value of dot(v0, v1).
 * \param interpolate value in range [0, 1] providing the interpolate of the interpolation
 */
vec2
fastuidraw_circular_interpolate(in vec2 v0, in vec2 v1, in float d, in float interpolate)
{
  float angle, c, s;
  angle = acos(d);
  /* we multiple by the cross of v0 and v1
   * to make sure we are interpolating from v0
   * to v1 because acos always gives a positive
   * angle
   */
  c = cos(angle * interpolate);
  s = sin(angle * interpolate) * sign(v0.x * v1.y - v1.x * v0.y);
  return vec2(c * v0.x - s * v0.y,
              s * v0.x + c * v0.y);
}
/*! @} */
