/*!
 * \file fastuidraw_compute_local_distance_from_pixel_distance.glsl.resource_string
 * \brief file fastuidraw_compute_local_distance_from_pixel_distance.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@gmail.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@gmail.com>
 *
 */


/*!\addtogroup GLSLVertCode
 * @{
 */

/*!
 * Given a point (clip_p) and a direction (clip_direction) in
 * clip-coordinates, compute the coeffecient W so that AFTER
 * projection, the points clip_p and (clip_p + W * clip_direction)
 * are pixel_distance pixels apart.
 * \param pixel_distance the distance in pixels to move by
 * \param clip_p the position of the vertex in CLIP coordiantes
 * \param clip_direction the direction by which to move in CLIP coordiantes
 */
float
fastuidraw_local_distance_from_pixel_distance(in float pixel_distance,
                                              in vec3 clip_p,
                                              in vec3 clip_direction)
{
  vec2 zeta;
  vec3 p, v;
  float return_value, length_zeta;

  /* convert clip-coordinates so that after dividing by .z,
   * the coordinates are in -pixel- units.
   */
  p = vec3(0.5 * fastuidraw_viewport_pixels.xy, 1.0) * clip_p;
  v = vec3(0.5 * fastuidraw_viewport_pixels.xy, 1.0) * clip_direction;

  /* From where this formula comes. Our challenge is to give a stroking width
   * in local (pre-projection) coordiantes from a stroking width of pixels.
   * We have a point p (given by position) and a direction v (given by offset)
   * and we wish to find an L so that after projection p + L*v is W pixels
   * from p. Now for some math.
   *
   * Let m>0, and let q(m) = p + m*v. Once m>0 is large enough, we can
   * project q(m) and p to the screen, find the screen space barycentric
   * W pixels from p.
   *
   * Let P = K * projection(p)
   * Let Q(m) = K * projection(q(m))
   *
   * where
   *
   * K = (0.5 * fastuidraw_viewport_pixels.x, 0.5 * fastuidraw_viewport_pixels.y, 1)
   * projection(x,y,z) = (x/z, y/z)
   *
   * Let R = P + W * DELTA where DELTA = (Q(m) - P)/||Q(m)-P||
   * Let s = W / ||Q(m) - P|| gives that P + s * (Q(m) - P) = R.
   * Let t = ( s/q(m)_z ) / ( (1-s)/p_z + s/q(m)_z). Then
   * projection( p + t * (q(m) - p) ) = projection( p + (t*m) * v) = R
   *
   * Thus the coefficient we want is given by (t*m).
   *
   * t * m = ( m * s * P_z) / ( (1-s)Q(m)_z + s * P_z)
   *
   * which simplifies to (after lots of algebra) to
   *
   * t * m = (W * p_z * p_z) / (- W * p_z * |v_z| + ||zeta||)
   *
   * where zeta = (v_x * p_z - v_z * p_x, v_y * p_z - v_z * p_y)
   */
  zeta = vec2(v.x * p.z - v.z * p.x,
              v.y * p.z - v.z * p.y);
  length_zeta = length(zeta);

  return_value = pixel_distance * p.z * p.z;
  return_value /= (-pixel_distance * abs(p.z * v.z) + length_zeta);

  return return_value;
}
/*! @} */
